$date
	Fri Aug 15 19:24:33 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module draft_1_tb $end
$var wire 8 ! approx_sum [7:0] $end
$var wire 1 " approx_cout $end
$var reg 8 # a [7:0] $end
$var reg 8 $ b [7:0] $end
$var reg 9 % exact_sum [8:0] $end
$var integer 32 & error_distance_sum [31:0] $end
$var integer 32 ' total_cases [31:0] $end
$scope module uut $end
$var wire 1 ( G_2 $end
$var wire 1 ) G_3 $end
$var wire 1 * P_3 $end
$var wire 8 + a [7:0] $end
$var wire 8 , b [7:0] $end
$var wire 1 - cmsp $end
$var wire 8 . sum [7:0] $end
$var wire 1 " cout $end
$scope module b1 $end
$var wire 4 / a [3:0] $end
$var wire 4 0 b [3:0] $end
$var wire 1 - cin $end
$var wire 4 1 g [3:0] $end
$var wire 1 2 g1_0 $end
$var wire 1 3 g2_0 $end
$var wire 1 4 g3_0 $end
$var wire 1 5 g3_2 $end
$var wire 4 6 p [3:0] $end
$var wire 1 7 p1_0 $end
$var wire 1 8 p2_0 $end
$var wire 1 9 p3_0 $end
$var wire 1 : p3_2 $end
$var wire 4 ; sum [3:0] $end
$var wire 1 " carry_out $end
$var wire 5 < carry [4:0] $end
$upscope $end
$upscope $end
$scope task apply_and_check $end
$var reg 8 = ta [7:0] $end
$var reg 8 > tb [7:0] $end
$var integer 32 ? ed [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx ?
b10111 >
b11001 =
b10 <
b10 ;
0:
09
08
07
b0 6
05
04
03
02
b1 1
b1 0
b1 /
b101111 .
0-
b10111 ,
b11001 +
1*
0)
0(
b0 '
b0 &
bx %
b10111 $
b11001 #
0"
b101111 !
$end
#5000
19
18
17
1:
b0 <
b11111111 !
b11111111 .
b1111 ;
b1111 6
b0 1
b0 0
b1111 /
b1111 $
b1111 ,
b11110000 #
b11110000 +
b1111 >
b11110000 =
b1 '
b1 &
b1 ?
b110000 %
#10000
13
08
09
12
07
0:
b1110 <
b1000 ;
0*
b10000111 !
b10000111 .
b110 6
b1 1
b11 0
b101 /
b110011 $
b110011 ,
b1010101 #
b1010101 +
b110011 >
b1010101 =
b10 '
b0 ?
b11111111 %
#15000
0"
03
19
04
18
02
17
1:
b0 <
b1111 ;
1*
b11111111 !
b11111111 .
b1111 6
b0 1
b101 0
b1010 /
b1010101 $
b1010101 ,
b10101010 #
b10101010 +
b1010101 >
b10101010 =
b11 '
b10 &
b1 ?
b10001000 %
#20000
b0 0
b1111 /
b1 $
b1 ,
b11111111 #
b11111111 +
b1 >
b11111111 =
b100 '
b0 ?
b11111111 %
#25000
09
07
0:
08
b0 ;
0*
b0 !
b0 .
b0 6
b0 /
b0 $
b0 ,
b0 #
b0 +
b0 >
b0 =
b101 '
b100000001 &
b11111111 ?
b100000000 %
#30000
1"
b10000 <
14
15
b1000 1
b1000 0
b1000 /
b10000000 $
b10000000 ,
b10000000 #
b10000000 +
b10000000 >
b10000000 =
b110 '
b0 ?
b0 %
#35000
b1111 ;
12
13
b11111 <
1-
1)
1(
b11111111 !
b11111111 .
b1111 1
b1111 0
b1111 /
b11111111 $
b11111111 ,
b11111111 #
b11111111 +
b11111111 >
b11111111 =
b111 '
b100000000 %
#40000
b1000 '
b100000010 &
b1 ?
b111111110 %
